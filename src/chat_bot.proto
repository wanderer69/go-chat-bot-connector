/* версия протобаф файла.*/
syntax = "proto3";
/* весь полученный из этого протобафа код добавляем в пакет _service */
package chat_bot_service;
option go_package = "./proto";

/* 
*/
message ParsePhraseRequest {
    string user_id = 1;
    string session_id = 2;
    string phrase = 3;
    int32 sequense_num = 4;
}

message ParsePhraseResponse {
    string result = 1;
    optional string error =2;
    string query_id =3;
}

message CheckParsePhraseRequest {
    string query_id = 1;
}

message CheckParsePhraseResponse {
    string result = 1;
    optional string error =2;
    string phrase = 3;
}

message VersionId {
    string id = 1;
    string date = 2;
}

message Version {
    VersionId version_id = 1;
    string relation_list = 2;
    string grammatics_list = 3;
}

message SetVersionRequest {
    string state = 1;
    Version version = 2;
}

message SetVersionResponse {
    string result = 1;
    optional string error =2;
    optional VersionId version_id = 3;
}

message GetVersionRequest {
    VersionId version_id = 1;
    string state = 2;
}

message GetVersionResponse {
    string result = 1;
    optional string error =2;
    optional Version version = 3;
}

message FilterField {
    string id = 1;
    repeated string values = 2;
    bool strict = 3;
}

message SortField {
    string id = 1;
    string type = 2;
}

message Pagination {
    int32 limit = 1;
    int32 offset = 2;
}

message GetLogsRequest {
    repeated FilterField filter_fields = 1;
    SortField sort_fields = 2;
    repeated string table_fields = 3;
    Pagination pagination = 4;
}

message LogRow {
    string id = 1;
    string data = 2;
    string user_request = 3;
    string bot_response = 4;
    string version = 5;
    string user_id = 6;
}

message LogResult {
    int32 count = 1;
    repeated LogRow rows = 2;
}

message GetLogsResponse {
    string result = 1;
    optional string error = 2;

    optional LogResult log_result = 3;
}

message ListVersions {
    repeated VersionId version_id = 1;
}

message ListVersionsRequest {
    string state = 1;
}

message ListVersionsResponse {
    string result = 1;
    optional string error = 2;
    optional ListVersions list_versions = 3;
}

message TestVersionRequest {
    string user_id = 1;
    string phrase = 2;
    string date = 3;
    int32 sequense_num = 4;
    Version version = 5;
}

message TestVersionResponse {
    string result = 1;
    optional string error = 2;
    string query_id = 3;
}

message GetWordRequest {
    string word = 1;
}

message GetWordResponse {
    string result = 1;
    optional string error = 2;
    optional string part_of_speach = 3;
}

/* Statistic info
*/
message StatRequest {
    string mode = 1;
}

message StatResponse {
    string result = 1;
    optional string error = 2;
    string info = 3;
}

message CheckRequest {
    string query = 1;
}

message CheckResponse {
    string result = 1;
}

/* сервис ChatBot с методами 
ParseSentense, 
CheckParseSentense, 
SetVersion, 
GetVersion, 
ListVersions,
TestVersion,
GetWord,
Stat, 
Check
*/

service ChatBot {
    rpc ParsePhrase(ParsePhraseRequest) returns (ParsePhraseResponse) {}
    rpc CheckParsePhrase(CheckParsePhraseRequest) returns (CheckParsePhraseResponse) {}
    rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {}
    rpc SetVersion(SetVersionRequest) returns (SetVersionResponse) {}
    rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}
    rpc ListVersions(ListVersionsRequest) returns (ListVersionsResponse) {}
    rpc TestVersion(TestVersionRequest) returns (TestVersionResponse) {}
//    rpc CheckTestVersion(CheckTestVersionRequest) returns (CheckTestVersionResponse) {}
    rpc GetWord(GetWordRequest) returns (GetWordResponse) {}
    rpc Stat(StatRequest) returns (StatResponse) {}
    rpc Check(CheckRequest) returns (CheckResponse) {}
}
